'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds2PatientsReports
    Inherits DataSet
    
    Private tablePatients As PatientsDataTable
    
    Private tableReportsPointer As ReportsPointerDataTable
    
    Private tablereports As reportsDataTable
    
    Private tablerawdata As rawdataDataTable
    
    Private tableCrystalReportsRptData As CrystalReportsRptDataDataTable
    
    Private relationReportToData As DataRelation
    
    Private relationReportsToReport As DataRelation
    
    Private relationPatientToReports As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Patients")) Is Nothing) Then
                Me.Tables.Add(New PatientsDataTable(ds.Tables("Patients")))
            End If
            If (Not (ds.Tables("ReportsPointer")) Is Nothing) Then
                Me.Tables.Add(New ReportsPointerDataTable(ds.Tables("ReportsPointer")))
            End If
            If (Not (ds.Tables("reports")) Is Nothing) Then
                Me.Tables.Add(New reportsDataTable(ds.Tables("reports")))
            End If
            If (Not (ds.Tables("rawdata")) Is Nothing) Then
                Me.Tables.Add(New rawdataDataTable(ds.Tables("rawdata")))
            End If
            If (Not (ds.Tables("CrystalReportsRptData")) Is Nothing) Then
                Me.Tables.Add(New CrystalReportsRptDataDataTable(ds.Tables("CrystalReportsRptData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Patients As PatientsDataTable
        Get
            Return Me.tablePatients
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReportsPointer As ReportsPointerDataTable
        Get
            Return Me.tableReportsPointer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property reports As reportsDataTable
        Get
            Return Me.tablereports
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rawdata As rawdataDataTable
        Get
            Return Me.tablerawdata
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CrystalReportsRptData As CrystalReportsRptDataDataTable
        Get
            Return Me.tableCrystalReportsRptData
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds2PatientsReports = CType(MyBase.Clone,ds2PatientsReports)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Patients")) Is Nothing) Then
            Me.Tables.Add(New PatientsDataTable(ds.Tables("Patients")))
        End If
        If (Not (ds.Tables("ReportsPointer")) Is Nothing) Then
            Me.Tables.Add(New ReportsPointerDataTable(ds.Tables("ReportsPointer")))
        End If
        If (Not (ds.Tables("reports")) Is Nothing) Then
            Me.Tables.Add(New reportsDataTable(ds.Tables("reports")))
        End If
        If (Not (ds.Tables("rawdata")) Is Nothing) Then
            Me.Tables.Add(New rawdataDataTable(ds.Tables("rawdata")))
        End If
        If (Not (ds.Tables("CrystalReportsRptData")) Is Nothing) Then
            Me.Tables.Add(New CrystalReportsRptDataDataTable(ds.Tables("CrystalReportsRptData")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePatients = CType(Me.Tables("Patients"),PatientsDataTable)
        If (Not (Me.tablePatients) Is Nothing) Then
            Me.tablePatients.InitVars
        End If
        Me.tableReportsPointer = CType(Me.Tables("ReportsPointer"),ReportsPointerDataTable)
        If (Not (Me.tableReportsPointer) Is Nothing) Then
            Me.tableReportsPointer.InitVars
        End If
        Me.tablereports = CType(Me.Tables("reports"),reportsDataTable)
        If (Not (Me.tablereports) Is Nothing) Then
            Me.tablereports.InitVars
        End If
        Me.tablerawdata = CType(Me.Tables("rawdata"),rawdataDataTable)
        If (Not (Me.tablerawdata) Is Nothing) Then
            Me.tablerawdata.InitVars
        End If
        Me.tableCrystalReportsRptData = CType(Me.Tables("CrystalReportsRptData"),CrystalReportsRptDataDataTable)
        If (Not (Me.tableCrystalReportsRptData) Is Nothing) Then
            Me.tableCrystalReportsRptData.InitVars
        End If
        Me.relationReportToData = Me.Relations("ReportToData")
        Me.relationReportsToReport = Me.Relations("ReportsToReport")
        Me.relationPatientToReports = Me.Relations("PatientToReports")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds2PatientsReports"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/ds2PatientsReports.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePatients = New PatientsDataTable
        Me.Tables.Add(Me.tablePatients)
        Me.tableReportsPointer = New ReportsPointerDataTable
        Me.Tables.Add(Me.tableReportsPointer)
        Me.tablereports = New reportsDataTable
        Me.Tables.Add(Me.tablereports)
        Me.tablerawdata = New rawdataDataTable
        Me.Tables.Add(Me.tablerawdata)
        Me.tableCrystalReportsRptData = New CrystalReportsRptDataDataTable
        Me.Tables.Add(Me.tableCrystalReportsRptData)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("PatientToReports", New DataColumn() {Me.tablePatients.PatientIDColumn}, New DataColumn() {Me.tableReportsPointer.PatientIDColumn})
        Me.tableReportsPointer.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("ReportsToReport", New DataColumn() {Me.tableReportsPointer.ReportColumn}, New DataColumn() {Me.tablereports.ReportColumn})
        Me.tablereports.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("ReportToData", New DataColumn() {Me.tablereports.RawDataIDColumn}, New DataColumn() {Me.tablerawdata.RawDataIDColumn})
        Me.tablerawdata.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        Me.relationReportToData = New DataRelation("ReportToData", New DataColumn() {Me.tablereports.RawDataIDColumn}, New DataColumn() {Me.tablerawdata.RawDataIDColumn}, false)
        Me.Relations.Add(Me.relationReportToData)
        Me.relationReportsToReport = New DataRelation("ReportsToReport", New DataColumn() {Me.tableReportsPointer.ReportColumn}, New DataColumn() {Me.tablereports.ReportColumn}, false)
        Me.Relations.Add(Me.relationReportsToReport)
        Me.relationPatientToReports = New DataRelation("PatientToReports", New DataColumn() {Me.tablePatients.PatientIDColumn}, New DataColumn() {Me.tableReportsPointer.PatientIDColumn}, false)
        Me.Relations.Add(Me.relationPatientToReports)
    End Sub
    
    Private Function ShouldSerializePatients() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeReportsPointer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializereports() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializerawdata() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCrystalReportsRptData() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PatientsRowChangeEventHandler(ByVal sender As Object, ByVal e As PatientsRowChangeEvent)
    
    Public Delegate Sub ReportsPointerRowChangeEventHandler(ByVal sender As Object, ByVal e As ReportsPointerRowChangeEvent)
    
    Public Delegate Sub reportsRowChangeEventHandler(ByVal sender As Object, ByVal e As reportsRowChangeEvent)
    
    Public Delegate Sub rawdataRowChangeEventHandler(ByVal sender As Object, ByVal e As rawdataRowChangeEvent)
    
    Public Delegate Sub CrystalReportsRptDataRowChangeEventHandler(ByVal sender As Object, ByVal e As CrystalReportsRptDataRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PatientsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAddress As DataColumn
        
        Private columnCity As DataColumn
        
        Private columnComments As DataColumn
        
        Private columnCustomerID As DataColumn
        
        Private columnFirstName As DataColumn
        
        Private columnLastName As DataColumn
        
        Private columnOrgID As DataColumn
        
        Private columnPatientFax As DataColumn
        
        Private columnPatientID As DataColumn
        
        Private columnPatientPhone As DataColumn
        
        Private columnPhysican As DataColumn
        
        Private columnReportsNumSaved As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnState As DataColumn
        
        Private columnZip As DataColumn
        
        Friend Sub New()
            MyBase.New("Patients")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property CityColumn As DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Friend ReadOnly Property CommentsColumn As DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property LastNameColumn As DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        Friend ReadOnly Property OrgIDColumn As DataColumn
            Get
                Return Me.columnOrgID
            End Get
        End Property
        
        Friend ReadOnly Property PatientFaxColumn As DataColumn
            Get
                Return Me.columnPatientFax
            End Get
        End Property
        
        Friend ReadOnly Property PatientIDColumn As DataColumn
            Get
                Return Me.columnPatientID
            End Get
        End Property
        
        Friend ReadOnly Property PatientPhoneColumn As DataColumn
            Get
                Return Me.columnPatientPhone
            End Get
        End Property
        
        Friend ReadOnly Property PhysicanColumn As DataColumn
            Get
                Return Me.columnPhysican
            End Get
        End Property
        
        Friend ReadOnly Property ReportsNumSavedColumn As DataColumn
            Get
                Return Me.columnReportsNumSaved
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property StateColumn As DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        Friend ReadOnly Property ZipColumn As DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PatientsRow
            Get
                Return CType(Me.Rows(index),PatientsRow)
            End Get
        End Property
        
        Public Event PatientsRowChanged As PatientsRowChangeEventHandler
        
        Public Event PatientsRowChanging As PatientsRowChangeEventHandler
        
        Public Event PatientsRowDeleted As PatientsRowChangeEventHandler
        
        Public Event PatientsRowDeleting As PatientsRowChangeEventHandler
        
        Public Overloads Sub AddPatientsRow(ByVal row As PatientsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPatientsRow(ByVal Address As String, ByVal City As String, ByVal Comments As String, ByVal CustomerID As String, ByVal FirstName As String, ByVal LastName As String, ByVal OrgID As String, ByVal PatientFax As String, ByVal PatientPhone As String, ByVal Physican As String, ByVal ReportsNumSaved As String, ByVal StartDate As Date, ByVal State As String, ByVal Zip As String) As PatientsRow
            Dim rowPatientsRow As PatientsRow = CType(Me.NewRow,PatientsRow)
            rowPatientsRow.ItemArray = New Object() {Address, City, Comments, CustomerID, FirstName, LastName, OrgID, PatientFax, Nothing, PatientPhone, Physican, ReportsNumSaved, StartDate, State, Zip}
            Me.Rows.Add(rowPatientsRow)
            Return rowPatientsRow
        End Function
        
        Public Function FindByPatientID(ByVal PatientID As Integer) As PatientsRow
            Return CType(Me.Rows.Find(New Object() {PatientID}),PatientsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PatientsDataTable = CType(MyBase.Clone,PatientsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PatientsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAddress = Me.Columns("Address")
            Me.columnCity = Me.Columns("City")
            Me.columnComments = Me.Columns("Comments")
            Me.columnCustomerID = Me.Columns("CustomerID")
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnLastName = Me.Columns("LastName")
            Me.columnOrgID = Me.Columns("OrgID")
            Me.columnPatientFax = Me.Columns("PatientFax")
            Me.columnPatientID = Me.Columns("PatientID")
            Me.columnPatientPhone = Me.Columns("PatientPhone")
            Me.columnPhysican = Me.Columns("Physican")
            Me.columnReportsNumSaved = Me.Columns("ReportsNumSaved")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnState = Me.Columns("State")
            Me.columnZip = Me.Columns("Zip")
        End Sub
        
        Private Sub InitClass()
            Me.columnAddress = New DataColumn("Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCity)
            Me.columnComments = New DataColumn("Comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComments)
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New DataColumn("LastName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastName)
            Me.columnOrgID = New DataColumn("OrgID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrgID)
            Me.columnPatientFax = New DataColumn("PatientFax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientFax)
            Me.columnPatientID = New DataColumn("PatientID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientID)
            Me.columnPatientPhone = New DataColumn("PatientPhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientPhone)
            Me.columnPhysican = New DataColumn("Physican", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhysican)
            Me.columnReportsNumSaved = New DataColumn("ReportsNumSaved", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportsNumSaved)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnState = New DataColumn("State", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnState)
            Me.columnZip = New DataColumn("Zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZip)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPatientID}, true))
            Me.columnPatientID.AutoIncrement = true
            Me.columnPatientID.AllowDBNull = false
            Me.columnPatientID.Unique = true
        End Sub
        
        Public Function NewPatientsRow() As PatientsRow
            Return CType(Me.NewRow,PatientsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PatientsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PatientsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PatientsRowChangedEvent) Is Nothing) Then
                RaiseEvent PatientsRowChanged(Me, New PatientsRowChangeEvent(CType(e.Row,PatientsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PatientsRowChangingEvent) Is Nothing) Then
                RaiseEvent PatientsRowChanging(Me, New PatientsRowChangeEvent(CType(e.Row,PatientsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PatientsRowDeletedEvent) Is Nothing) Then
                RaiseEvent PatientsRowDeleted(Me, New PatientsRowChangeEvent(CType(e.Row,PatientsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PatientsRowDeletingEvent) Is Nothing) Then
                RaiseEvent PatientsRowDeleting(Me, New PatientsRowChangeEvent(CType(e.Row,PatientsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePatientsRow(ByVal row As PatientsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PatientsRow
        Inherits DataRow
        
        Private tablePatients As PatientsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePatients = CType(Me.Table,PatientsDataTable)
        End Sub
        
        Public Property Address As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.AddressColumn) = value
            End Set
        End Property
        
        Public Property City As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.CityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.CityColumn) = value
            End Set
        End Property
        
        Public Property Comments As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.CommentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.CommentsColumn) = value
            End Set
        End Property
        
        Public Property CustomerID As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.CustomerIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property FirstName As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.FirstNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property LastName As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.LastNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.LastNameColumn) = value
            End Set
        End Property
        
        Public Property OrgID As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.OrgIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.OrgIDColumn) = value
            End Set
        End Property
        
        Public Property PatientFax As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.PatientFaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.PatientFaxColumn) = value
            End Set
        End Property
        
        Public Property PatientID As Integer
            Get
                Return CType(Me(Me.tablePatients.PatientIDColumn),Integer)
            End Get
            Set
                Me(Me.tablePatients.PatientIDColumn) = value
            End Set
        End Property
        
        Public Property PatientPhone As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.PatientPhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.PatientPhoneColumn) = value
            End Set
        End Property
        
        Public Property Physican As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.PhysicanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.PhysicanColumn) = value
            End Set
        End Property
        
        Public Property ReportsNumSaved As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.ReportsNumSavedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.ReportsNumSavedColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePatients.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.StartDateColumn) = value
            End Set
        End Property
        
        Public Property State As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.StateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.StateColumn) = value
            End Set
        End Property
        
        Public Property Zip As String
            Get
                Try 
                    Return CType(Me(Me.tablePatients.ZipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePatients.ZipColumn) = value
            End Set
        End Property
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tablePatients.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tablePatients.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tablePatients.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tablePatients.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tablePatients.CommentsColumn)
        End Function
        
        Public Sub SetCommentsNull()
            Me(Me.tablePatients.CommentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tablePatients.CustomerIDColumn)
        End Function
        
        Public Sub SetCustomerIDNull()
            Me(Me.tablePatients.CustomerIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablePatients.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tablePatients.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tablePatients.LastNameColumn)
        End Function
        
        Public Sub SetLastNameNull()
            Me(Me.tablePatients.LastNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrgIDNull() As Boolean
            Return Me.IsNull(Me.tablePatients.OrgIDColumn)
        End Function
        
        Public Sub SetOrgIDNull()
            Me(Me.tablePatients.OrgIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatientFaxNull() As Boolean
            Return Me.IsNull(Me.tablePatients.PatientFaxColumn)
        End Function
        
        Public Sub SetPatientFaxNull()
            Me(Me.tablePatients.PatientFaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatientPhoneNull() As Boolean
            Return Me.IsNull(Me.tablePatients.PatientPhoneColumn)
        End Function
        
        Public Sub SetPatientPhoneNull()
            Me(Me.tablePatients.PatientPhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhysicanNull() As Boolean
            Return Me.IsNull(Me.tablePatients.PhysicanColumn)
        End Function
        
        Public Sub SetPhysicanNull()
            Me(Me.tablePatients.PhysicanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReportsNumSavedNull() As Boolean
            Return Me.IsNull(Me.tablePatients.ReportsNumSavedColumn)
        End Function
        
        Public Sub SetReportsNumSavedNull()
            Me(Me.tablePatients.ReportsNumSavedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tablePatients.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tablePatients.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tablePatients.StateColumn)
        End Function
        
        Public Sub SetStateNull()
            Me(Me.tablePatients.StateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZipNull() As Boolean
            Return Me.IsNull(Me.tablePatients.ZipColumn)
        End Function
        
        Public Sub SetZipNull()
            Me(Me.tablePatients.ZipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetReportsPointerRows() As ReportsPointerRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PatientToReports")),ReportsPointerRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PatientsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PatientsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PatientsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PatientsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportsPointerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPatientID As DataColumn
        
        Private columnReport As DataColumn
        
        Private columnReportID As DataColumn
        
        Friend Sub New()
            MyBase.New("ReportsPointer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PatientIDColumn As DataColumn
            Get
                Return Me.columnPatientID
            End Get
        End Property
        
        Friend ReadOnly Property ReportColumn As DataColumn
            Get
                Return Me.columnReport
            End Get
        End Property
        
        Friend ReadOnly Property ReportIDColumn As DataColumn
            Get
                Return Me.columnReportID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReportsPointerRow
            Get
                Return CType(Me.Rows(index),ReportsPointerRow)
            End Get
        End Property
        
        Public Event ReportsPointerRowChanged As ReportsPointerRowChangeEventHandler
        
        Public Event ReportsPointerRowChanging As ReportsPointerRowChangeEventHandler
        
        Public Event ReportsPointerRowDeleted As ReportsPointerRowChangeEventHandler
        
        Public Event ReportsPointerRowDeleting As ReportsPointerRowChangeEventHandler
        
        Public Overloads Sub AddReportsPointerRow(ByVal row As ReportsPointerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReportsPointerRow(ByVal parentPatientsRowByPatientToReports As PatientsRow, ByVal ReportID As Integer) As ReportsPointerRow
            Dim rowReportsPointerRow As ReportsPointerRow = CType(Me.NewRow,ReportsPointerRow)
            rowReportsPointerRow.ItemArray = New Object() {parentPatientsRowByPatientToReports(8), Nothing, ReportID}
            Me.Rows.Add(rowReportsPointerRow)
            Return rowReportsPointerRow
        End Function
        
        Public Function FindByReport(ByVal Report As Integer) As ReportsPointerRow
            Return CType(Me.Rows.Find(New Object() {Report}),ReportsPointerRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReportsPointerDataTable = CType(MyBase.Clone,ReportsPointerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReportsPointerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPatientID = Me.Columns("PatientID")
            Me.columnReport = Me.Columns("Report")
            Me.columnReportID = Me.Columns("ReportID")
        End Sub
        
        Private Sub InitClass()
            Me.columnPatientID = New DataColumn("PatientID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientID)
            Me.columnReport = New DataColumn("Report", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReport)
            Me.columnReportID = New DataColumn("ReportID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnReport}, true))
            Me.columnReport.AutoIncrement = true
            Me.columnReport.AllowDBNull = false
            Me.columnReport.Unique = true
        End Sub
        
        Public Function NewReportsPointerRow() As ReportsPointerRow
            Return CType(Me.NewRow,ReportsPointerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReportsPointerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReportsPointerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReportsPointerRowChangedEvent) Is Nothing) Then
                RaiseEvent ReportsPointerRowChanged(Me, New ReportsPointerRowChangeEvent(CType(e.Row,ReportsPointerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReportsPointerRowChangingEvent) Is Nothing) Then
                RaiseEvent ReportsPointerRowChanging(Me, New ReportsPointerRowChangeEvent(CType(e.Row,ReportsPointerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReportsPointerRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReportsPointerRowDeleted(Me, New ReportsPointerRowChangeEvent(CType(e.Row,ReportsPointerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReportsPointerRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReportsPointerRowDeleting(Me, New ReportsPointerRowChangeEvent(CType(e.Row,ReportsPointerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReportsPointerRow(ByVal row As ReportsPointerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportsPointerRow
        Inherits DataRow
        
        Private tableReportsPointer As ReportsPointerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReportsPointer = CType(Me.Table,ReportsPointerDataTable)
        End Sub
        
        Public Property PatientID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableReportsPointer.PatientIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportsPointer.PatientIDColumn) = value
            End Set
        End Property
        
        Public Property Report As Integer
            Get
                Return CType(Me(Me.tableReportsPointer.ReportColumn),Integer)
            End Get
            Set
                Me(Me.tableReportsPointer.ReportColumn) = value
            End Set
        End Property
        
        Public Property ReportID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableReportsPointer.ReportIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportsPointer.ReportIDColumn) = value
            End Set
        End Property
        
        Public Property PatientsRow As PatientsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PatientToReports")),PatientsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PatientToReports"))
            End Set
        End Property
        
        Public Function IsPatientIDNull() As Boolean
            Return Me.IsNull(Me.tableReportsPointer.PatientIDColumn)
        End Function
        
        Public Sub SetPatientIDNull()
            Me(Me.tableReportsPointer.PatientIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReportIDNull() As Boolean
            Return Me.IsNull(Me.tableReportsPointer.ReportIDColumn)
        End Function
        
        Public Sub SetReportIDNull()
            Me(Me.tableReportsPointer.ReportIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetreportsRows() As reportsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ReportsToReport")),reportsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportsPointerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReportsPointerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReportsPointerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReportsPointerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class reportsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAnalysisData As DataColumn
        
        Private columnAverageSPO2 As DataColumn
        
        Private columnComments As DataColumn
        
        Private columnDesatBelowCustom As DataColumn
        
        Private columnDesatIncidenceIndex As DataColumn
        
        Private columnDesatOver3 As DataColumn
        
        Private columnDesatUnder1 As DataColumn
        
        Private columnDesatUnder2 As DataColumn
        
        Private columnDesatUnder3 As DataColumn
        
        Private columnExcludedData As DataColumn
        
        Private columnHighSPO2 As DataColumn
        
        Private columnHRAverage As DataColumn
        
        Private columnHRHigh As DataColumn
        
        Private columnHRLow As DataColumn
        
        Private columnLowSPO2 As DataColumn
        
        Private columnRawDataID As DataColumn
        
        Private columnRecordedData As DataColumn
        
        Private columnReport As DataColumn
        
        Private columnReportDate As DataColumn
        
        Private columnReportKey As DataColumn
        
        Private columnRptEndTime As DataColumn
        
        Private columnRptStartTime As DataColumn
        
        Private columnSPO2Below60 As DataColumn
        
        Private columnSPO2Below70 As DataColumn
        
        Private columnSPO2Below80 As DataColumn
        
        Private columnSPO2Below90 As DataColumn
        
        Private columnSPO2BelowCustom As DataColumn
        
        Friend Sub New()
            MyBase.New("reports")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AnalysisDataColumn As DataColumn
            Get
                Return Me.columnAnalysisData
            End Get
        End Property
        
        Friend ReadOnly Property AverageSPO2Column As DataColumn
            Get
                Return Me.columnAverageSPO2
            End Get
        End Property
        
        Friend ReadOnly Property CommentsColumn As DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        Friend ReadOnly Property DesatBelowCustomColumn As DataColumn
            Get
                Return Me.columnDesatBelowCustom
            End Get
        End Property
        
        Friend ReadOnly Property DesatIncidenceIndexColumn As DataColumn
            Get
                Return Me.columnDesatIncidenceIndex
            End Get
        End Property
        
        Friend ReadOnly Property DesatOver3Column As DataColumn
            Get
                Return Me.columnDesatOver3
            End Get
        End Property
        
        Friend ReadOnly Property DesatUnder1Column As DataColumn
            Get
                Return Me.columnDesatUnder1
            End Get
        End Property
        
        Friend ReadOnly Property DesatUnder2Column As DataColumn
            Get
                Return Me.columnDesatUnder2
            End Get
        End Property
        
        Friend ReadOnly Property DesatUnder3Column As DataColumn
            Get
                Return Me.columnDesatUnder3
            End Get
        End Property
        
        Friend ReadOnly Property ExcludedDataColumn As DataColumn
            Get
                Return Me.columnExcludedData
            End Get
        End Property
        
        Friend ReadOnly Property HighSPO2Column As DataColumn
            Get
                Return Me.columnHighSPO2
            End Get
        End Property
        
        Friend ReadOnly Property HRAverageColumn As DataColumn
            Get
                Return Me.columnHRAverage
            End Get
        End Property
        
        Friend ReadOnly Property HRHighColumn As DataColumn
            Get
                Return Me.columnHRHigh
            End Get
        End Property
        
        Friend ReadOnly Property HRLowColumn As DataColumn
            Get
                Return Me.columnHRLow
            End Get
        End Property
        
        Friend ReadOnly Property LowSPO2Column As DataColumn
            Get
                Return Me.columnLowSPO2
            End Get
        End Property
        
        Friend ReadOnly Property RawDataIDColumn As DataColumn
            Get
                Return Me.columnRawDataID
            End Get
        End Property
        
        Friend ReadOnly Property RecordedDataColumn As DataColumn
            Get
                Return Me.columnRecordedData
            End Get
        End Property
        
        Friend ReadOnly Property ReportColumn As DataColumn
            Get
                Return Me.columnReport
            End Get
        End Property
        
        Friend ReadOnly Property ReportDateColumn As DataColumn
            Get
                Return Me.columnReportDate
            End Get
        End Property
        
        Friend ReadOnly Property ReportKeyColumn As DataColumn
            Get
                Return Me.columnReportKey
            End Get
        End Property
        
        Friend ReadOnly Property RptEndTimeColumn As DataColumn
            Get
                Return Me.columnRptEndTime
            End Get
        End Property
        
        Friend ReadOnly Property RptStartTimeColumn As DataColumn
            Get
                Return Me.columnRptStartTime
            End Get
        End Property
        
        Friend ReadOnly Property SPO2Below60Column As DataColumn
            Get
                Return Me.columnSPO2Below60
            End Get
        End Property
        
        Friend ReadOnly Property SPO2Below70Column As DataColumn
            Get
                Return Me.columnSPO2Below70
            End Get
        End Property
        
        Friend ReadOnly Property SPO2Below80Column As DataColumn
            Get
                Return Me.columnSPO2Below80
            End Get
        End Property
        
        Friend ReadOnly Property SPO2Below90Column As DataColumn
            Get
                Return Me.columnSPO2Below90
            End Get
        End Property
        
        Friend ReadOnly Property SPO2BelowCustomColumn As DataColumn
            Get
                Return Me.columnSPO2BelowCustom
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As reportsRow
            Get
                Return CType(Me.Rows(index),reportsRow)
            End Get
        End Property
        
        Public Event reportsRowChanged As reportsRowChangeEventHandler
        
        Public Event reportsRowChanging As reportsRowChangeEventHandler
        
        Public Event reportsRowDeleted As reportsRowChangeEventHandler
        
        Public Event reportsRowDeleting As reportsRowChangeEventHandler
        
        Public Overloads Sub AddreportsRow(ByVal row As reportsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddreportsRow( _
                    ByVal AnalysisData As Date,  _
                    ByVal AverageSPO2 As String,  _
                    ByVal Comments As String,  _
                    ByVal DesatBelowCustom As String,  _
                    ByVal DesatIncidenceIndex As String,  _
                    ByVal DesatOver3 As String,  _
                    ByVal DesatUnder1 As String,  _
                    ByVal DesatUnder2 As String,  _
                    ByVal DesatUnder3 As String,  _
                    ByVal ExcludedData As Date,  _
                    ByVal HighSPO2 As String,  _
                    ByVal HRAverage As String,  _
                    ByVal HRHigh As String,  _
                    ByVal HRLow As String,  _
                    ByVal LowSPO2 As String,  _
                    ByVal RecordedData As Date,  _
                    ByVal parentReportsPointerRowByReportsToReport As ReportsPointerRow,  _
                    ByVal ReportDate As Date,  _
                    ByVal ReportKey As Integer,  _
                    ByVal RptEndTime As Date,  _
                    ByVal RptStartTime As Date,  _
                    ByVal SPO2Below60 As String,  _
                    ByVal SPO2Below70 As String,  _
                    ByVal SPO2Below80 As String,  _
                    ByVal SPO2Below90 As String,  _
                    ByVal SPO2BelowCustom As String) As reportsRow
            Dim rowreportsRow As reportsRow = CType(Me.NewRow,reportsRow)
            rowreportsRow.ItemArray = New Object() {AnalysisData, AverageSPO2, Comments, DesatBelowCustom, DesatIncidenceIndex, DesatOver3, DesatUnder1, DesatUnder2, DesatUnder3, ExcludedData, HighSPO2, HRAverage, HRHigh, HRLow, LowSPO2, Nothing, RecordedData, parentReportsPointerRowByReportsToReport(1), ReportDate, ReportKey, RptEndTime, RptStartTime, SPO2Below60, SPO2Below70, SPO2Below80, SPO2Below90, SPO2BelowCustom}
            Me.Rows.Add(rowreportsRow)
            Return rowreportsRow
        End Function
        
        Public Function FindByRawDataID(ByVal RawDataID As Integer) As reportsRow
            Return CType(Me.Rows.Find(New Object() {RawDataID}),reportsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As reportsDataTable = CType(MyBase.Clone,reportsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New reportsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAnalysisData = Me.Columns("AnalysisData")
            Me.columnAverageSPO2 = Me.Columns("AverageSPO2")
            Me.columnComments = Me.Columns("Comments")
            Me.columnDesatBelowCustom = Me.Columns("DesatBelowCustom")
            Me.columnDesatIncidenceIndex = Me.Columns("DesatIncidenceIndex")
            Me.columnDesatOver3 = Me.Columns("DesatOver3")
            Me.columnDesatUnder1 = Me.Columns("DesatUnder1")
            Me.columnDesatUnder2 = Me.Columns("DesatUnder2")
            Me.columnDesatUnder3 = Me.Columns("DesatUnder3")
            Me.columnExcludedData = Me.Columns("ExcludedData")
            Me.columnHighSPO2 = Me.Columns("HighSPO2")
            Me.columnHRAverage = Me.Columns("HRAverage")
            Me.columnHRHigh = Me.Columns("HRHigh")
            Me.columnHRLow = Me.Columns("HRLow")
            Me.columnLowSPO2 = Me.Columns("LowSPO2")
            Me.columnRawDataID = Me.Columns("RawDataID")
            Me.columnRecordedData = Me.Columns("RecordedData")
            Me.columnReport = Me.Columns("Report")
            Me.columnReportDate = Me.Columns("ReportDate")
            Me.columnReportKey = Me.Columns("ReportKey")
            Me.columnRptEndTime = Me.Columns("RptEndTime")
            Me.columnRptStartTime = Me.Columns("RptStartTime")
            Me.columnSPO2Below60 = Me.Columns("SPO2Below60")
            Me.columnSPO2Below70 = Me.Columns("SPO2Below70")
            Me.columnSPO2Below80 = Me.Columns("SPO2Below80")
            Me.columnSPO2Below90 = Me.Columns("SPO2Below90")
            Me.columnSPO2BelowCustom = Me.Columns("SPO2BelowCustom")
        End Sub
        
        Private Sub InitClass()
            Me.columnAnalysisData = New DataColumn("AnalysisData", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnalysisData)
            Me.columnAverageSPO2 = New DataColumn("AverageSPO2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAverageSPO2)
            Me.columnComments = New DataColumn("Comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComments)
            Me.columnDesatBelowCustom = New DataColumn("DesatBelowCustom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesatBelowCustom)
            Me.columnDesatIncidenceIndex = New DataColumn("DesatIncidenceIndex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesatIncidenceIndex)
            Me.columnDesatOver3 = New DataColumn("DesatOver3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesatOver3)
            Me.columnDesatUnder1 = New DataColumn("DesatUnder1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesatUnder1)
            Me.columnDesatUnder2 = New DataColumn("DesatUnder2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesatUnder2)
            Me.columnDesatUnder3 = New DataColumn("DesatUnder3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesatUnder3)
            Me.columnExcludedData = New DataColumn("ExcludedData", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExcludedData)
            Me.columnHighSPO2 = New DataColumn("HighSPO2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHighSPO2)
            Me.columnHRAverage = New DataColumn("HRAverage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHRAverage)
            Me.columnHRHigh = New DataColumn("HRHigh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHRHigh)
            Me.columnHRLow = New DataColumn("HRLow", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHRLow)
            Me.columnLowSPO2 = New DataColumn("LowSPO2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLowSPO2)
            Me.columnRawDataID = New DataColumn("RawDataID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRawDataID)
            Me.columnRecordedData = New DataColumn("RecordedData", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecordedData)
            Me.columnReport = New DataColumn("Report", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReport)
            Me.columnReportDate = New DataColumn("ReportDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportDate)
            Me.columnReportKey = New DataColumn("ReportKey", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportKey)
            Me.columnRptEndTime = New DataColumn("RptEndTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRptEndTime)
            Me.columnRptStartTime = New DataColumn("RptStartTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRptStartTime)
            Me.columnSPO2Below60 = New DataColumn("SPO2Below60", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPO2Below60)
            Me.columnSPO2Below70 = New DataColumn("SPO2Below70", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPO2Below70)
            Me.columnSPO2Below80 = New DataColumn("SPO2Below80", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPO2Below80)
            Me.columnSPO2Below90 = New DataColumn("SPO2Below90", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPO2Below90)
            Me.columnSPO2BelowCustom = New DataColumn("SPO2BelowCustom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPO2BelowCustom)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnRawDataID}, true))
            Me.columnRawDataID.AutoIncrement = true
            Me.columnRawDataID.AllowDBNull = false
            Me.columnRawDataID.Unique = true
        End Sub
        
        Public Function NewreportsRow() As reportsRow
            Return CType(Me.NewRow,reportsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New reportsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(reportsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.reportsRowChangedEvent) Is Nothing) Then
                RaiseEvent reportsRowChanged(Me, New reportsRowChangeEvent(CType(e.Row,reportsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.reportsRowChangingEvent) Is Nothing) Then
                RaiseEvent reportsRowChanging(Me, New reportsRowChangeEvent(CType(e.Row,reportsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.reportsRowDeletedEvent) Is Nothing) Then
                RaiseEvent reportsRowDeleted(Me, New reportsRowChangeEvent(CType(e.Row,reportsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.reportsRowDeletingEvent) Is Nothing) Then
                RaiseEvent reportsRowDeleting(Me, New reportsRowChangeEvent(CType(e.Row,reportsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovereportsRow(ByVal row As reportsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class reportsRow
        Inherits DataRow
        
        Private tablereports As reportsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablereports = CType(Me.Table,reportsDataTable)
        End Sub
        
        Public Property AnalysisData As Date
            Get
                Try 
                    Return CType(Me(Me.tablereports.AnalysisDataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.AnalysisDataColumn) = value
            End Set
        End Property
        
        Public Property AverageSPO2 As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.AverageSPO2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.AverageSPO2Column) = value
            End Set
        End Property
        
        Public Property Comments As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.CommentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.CommentsColumn) = value
            End Set
        End Property
        
        Public Property DesatBelowCustom As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.DesatBelowCustomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.DesatBelowCustomColumn) = value
            End Set
        End Property
        
        Public Property DesatIncidenceIndex As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.DesatIncidenceIndexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.DesatIncidenceIndexColumn) = value
            End Set
        End Property
        
        Public Property DesatOver3 As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.DesatOver3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.DesatOver3Column) = value
            End Set
        End Property
        
        Public Property DesatUnder1 As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.DesatUnder1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.DesatUnder1Column) = value
            End Set
        End Property
        
        Public Property DesatUnder2 As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.DesatUnder2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.DesatUnder2Column) = value
            End Set
        End Property
        
        Public Property DesatUnder3 As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.DesatUnder3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.DesatUnder3Column) = value
            End Set
        End Property
        
        Public Property ExcludedData As Date
            Get
                Try 
                    Return CType(Me(Me.tablereports.ExcludedDataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.ExcludedDataColumn) = value
            End Set
        End Property
        
        Public Property HighSPO2 As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.HighSPO2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.HighSPO2Column) = value
            End Set
        End Property
        
        Public Property HRAverage As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.HRAverageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.HRAverageColumn) = value
            End Set
        End Property
        
        Public Property HRHigh As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.HRHighColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.HRHighColumn) = value
            End Set
        End Property
        
        Public Property HRLow As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.HRLowColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.HRLowColumn) = value
            End Set
        End Property
        
        Public Property LowSPO2 As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.LowSPO2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.LowSPO2Column) = value
            End Set
        End Property
        
        Public Property RawDataID As Integer
            Get
                Return CType(Me(Me.tablereports.RawDataIDColumn),Integer)
            End Get
            Set
                Me(Me.tablereports.RawDataIDColumn) = value
            End Set
        End Property
        
        Public Property RecordedData As Date
            Get
                Try 
                    Return CType(Me(Me.tablereports.RecordedDataColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.RecordedDataColumn) = value
            End Set
        End Property
        
        Public Property Report As Integer
            Get
                Try 
                    Return CType(Me(Me.tablereports.ReportColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.ReportColumn) = value
            End Set
        End Property
        
        Public Property ReportDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablereports.ReportDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.ReportDateColumn) = value
            End Set
        End Property
        
        Public Property ReportKey As Integer
            Get
                Try 
                    Return CType(Me(Me.tablereports.ReportKeyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.ReportKeyColumn) = value
            End Set
        End Property
        
        Public Property RptEndTime As Date
            Get
                Try 
                    Return CType(Me(Me.tablereports.RptEndTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.RptEndTimeColumn) = value
            End Set
        End Property
        
        Public Property RptStartTime As Date
            Get
                Try 
                    Return CType(Me(Me.tablereports.RptStartTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.RptStartTimeColumn) = value
            End Set
        End Property
        
        Public Property SPO2Below60 As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.SPO2Below60Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.SPO2Below60Column) = value
            End Set
        End Property
        
        Public Property SPO2Below70 As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.SPO2Below70Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.SPO2Below70Column) = value
            End Set
        End Property
        
        Public Property SPO2Below80 As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.SPO2Below80Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.SPO2Below80Column) = value
            End Set
        End Property
        
        Public Property SPO2Below90 As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.SPO2Below90Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.SPO2Below90Column) = value
            End Set
        End Property
        
        Public Property SPO2BelowCustom As String
            Get
                Try 
                    Return CType(Me(Me.tablereports.SPO2BelowCustomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereports.SPO2BelowCustomColumn) = value
            End Set
        End Property
        
        Public Property ReportsPointerRow As ReportsPointerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ReportsToReport")),ReportsPointerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ReportsToReport"))
            End Set
        End Property
        
        Public Function IsAnalysisDataNull() As Boolean
            Return Me.IsNull(Me.tablereports.AnalysisDataColumn)
        End Function
        
        Public Sub SetAnalysisDataNull()
            Me(Me.tablereports.AnalysisDataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAverageSPO2Null() As Boolean
            Return Me.IsNull(Me.tablereports.AverageSPO2Column)
        End Function
        
        Public Sub SetAverageSPO2Null()
            Me(Me.tablereports.AverageSPO2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tablereports.CommentsColumn)
        End Function
        
        Public Sub SetCommentsNull()
            Me(Me.tablereports.CommentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesatBelowCustomNull() As Boolean
            Return Me.IsNull(Me.tablereports.DesatBelowCustomColumn)
        End Function
        
        Public Sub SetDesatBelowCustomNull()
            Me(Me.tablereports.DesatBelowCustomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesatIncidenceIndexNull() As Boolean
            Return Me.IsNull(Me.tablereports.DesatIncidenceIndexColumn)
        End Function
        
        Public Sub SetDesatIncidenceIndexNull()
            Me(Me.tablereports.DesatIncidenceIndexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesatOver3Null() As Boolean
            Return Me.IsNull(Me.tablereports.DesatOver3Column)
        End Function
        
        Public Sub SetDesatOver3Null()
            Me(Me.tablereports.DesatOver3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesatUnder1Null() As Boolean
            Return Me.IsNull(Me.tablereports.DesatUnder1Column)
        End Function
        
        Public Sub SetDesatUnder1Null()
            Me(Me.tablereports.DesatUnder1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesatUnder2Null() As Boolean
            Return Me.IsNull(Me.tablereports.DesatUnder2Column)
        End Function
        
        Public Sub SetDesatUnder2Null()
            Me(Me.tablereports.DesatUnder2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesatUnder3Null() As Boolean
            Return Me.IsNull(Me.tablereports.DesatUnder3Column)
        End Function
        
        Public Sub SetDesatUnder3Null()
            Me(Me.tablereports.DesatUnder3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsExcludedDataNull() As Boolean
            Return Me.IsNull(Me.tablereports.ExcludedDataColumn)
        End Function
        
        Public Sub SetExcludedDataNull()
            Me(Me.tablereports.ExcludedDataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHighSPO2Null() As Boolean
            Return Me.IsNull(Me.tablereports.HighSPO2Column)
        End Function
        
        Public Sub SetHighSPO2Null()
            Me(Me.tablereports.HighSPO2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsHRAverageNull() As Boolean
            Return Me.IsNull(Me.tablereports.HRAverageColumn)
        End Function
        
        Public Sub SetHRAverageNull()
            Me(Me.tablereports.HRAverageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHRHighNull() As Boolean
            Return Me.IsNull(Me.tablereports.HRHighColumn)
        End Function
        
        Public Sub SetHRHighNull()
            Me(Me.tablereports.HRHighColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHRLowNull() As Boolean
            Return Me.IsNull(Me.tablereports.HRLowColumn)
        End Function
        
        Public Sub SetHRLowNull()
            Me(Me.tablereports.HRLowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLowSPO2Null() As Boolean
            Return Me.IsNull(Me.tablereports.LowSPO2Column)
        End Function
        
        Public Sub SetLowSPO2Null()
            Me(Me.tablereports.LowSPO2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecordedDataNull() As Boolean
            Return Me.IsNull(Me.tablereports.RecordedDataColumn)
        End Function
        
        Public Sub SetRecordedDataNull()
            Me(Me.tablereports.RecordedDataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReportNull() As Boolean
            Return Me.IsNull(Me.tablereports.ReportColumn)
        End Function
        
        Public Sub SetReportNull()
            Me(Me.tablereports.ReportColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReportDateNull() As Boolean
            Return Me.IsNull(Me.tablereports.ReportDateColumn)
        End Function
        
        Public Sub SetReportDateNull()
            Me(Me.tablereports.ReportDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReportKeyNull() As Boolean
            Return Me.IsNull(Me.tablereports.ReportKeyColumn)
        End Function
        
        Public Sub SetReportKeyNull()
            Me(Me.tablereports.ReportKeyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRptEndTimeNull() As Boolean
            Return Me.IsNull(Me.tablereports.RptEndTimeColumn)
        End Function
        
        Public Sub SetRptEndTimeNull()
            Me(Me.tablereports.RptEndTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRptStartTimeNull() As Boolean
            Return Me.IsNull(Me.tablereports.RptStartTimeColumn)
        End Function
        
        Public Sub SetRptStartTimeNull()
            Me(Me.tablereports.RptStartTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPO2Below60Null() As Boolean
            Return Me.IsNull(Me.tablereports.SPO2Below60Column)
        End Function
        
        Public Sub SetSPO2Below60Null()
            Me(Me.tablereports.SPO2Below60Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPO2Below70Null() As Boolean
            Return Me.IsNull(Me.tablereports.SPO2Below70Column)
        End Function
        
        Public Sub SetSPO2Below70Null()
            Me(Me.tablereports.SPO2Below70Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPO2Below80Null() As Boolean
            Return Me.IsNull(Me.tablereports.SPO2Below80Column)
        End Function
        
        Public Sub SetSPO2Below80Null()
            Me(Me.tablereports.SPO2Below80Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPO2Below90Null() As Boolean
            Return Me.IsNull(Me.tablereports.SPO2Below90Column)
        End Function
        
        Public Sub SetSPO2Below90Null()
            Me(Me.tablereports.SPO2Below90Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPO2BelowCustomNull() As Boolean
            Return Me.IsNull(Me.tablereports.SPO2BelowCustomColumn)
        End Function
        
        Public Sub SetSPO2BelowCustomNull()
            Me(Me.tablereports.SPO2BelowCustomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetrawdataRows() As rawdataRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ReportToData")),rawdataRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class reportsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As reportsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As reportsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As reportsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class rawdataDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDataID As DataColumn
        
        Private columnHR As DataColumn
        
        Private columnRawDataID As DataColumn
        
        Private columnSampleTime As DataColumn
        
        Private columnSPO2 As DataColumn
        
        Friend Sub New()
            MyBase.New("rawdata")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DataIDColumn As DataColumn
            Get
                Return Me.columnDataID
            End Get
        End Property
        
        Friend ReadOnly Property HRColumn As DataColumn
            Get
                Return Me.columnHR
            End Get
        End Property
        
        Friend ReadOnly Property RawDataIDColumn As DataColumn
            Get
                Return Me.columnRawDataID
            End Get
        End Property
        
        Friend ReadOnly Property SampleTimeColumn As DataColumn
            Get
                Return Me.columnSampleTime
            End Get
        End Property
        
        Friend ReadOnly Property SPO2Column As DataColumn
            Get
                Return Me.columnSPO2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As rawdataRow
            Get
                Return CType(Me.Rows(index),rawdataRow)
            End Get
        End Property
        
        Public Event rawdataRowChanged As rawdataRowChangeEventHandler
        
        Public Event rawdataRowChanging As rawdataRowChangeEventHandler
        
        Public Event rawdataRowDeleted As rawdataRowChangeEventHandler
        
        Public Event rawdataRowDeleting As rawdataRowChangeEventHandler
        
        Public Overloads Sub AddrawdataRow(ByVal row As rawdataRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddrawdataRow(ByVal HR As String, ByVal parentreportsRowByReportToData As reportsRow, ByVal SampleTime As Date, ByVal SPO2 As String) As rawdataRow
            Dim rowrawdataRow As rawdataRow = CType(Me.NewRow,rawdataRow)
            rowrawdataRow.ItemArray = New Object() {Nothing, HR, parentreportsRowByReportToData(15), SampleTime, SPO2}
            Me.Rows.Add(rowrawdataRow)
            Return rowrawdataRow
        End Function
        
        Public Function FindByDataID(ByVal DataID As Integer) As rawdataRow
            Return CType(Me.Rows.Find(New Object() {DataID}),rawdataRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As rawdataDataTable = CType(MyBase.Clone,rawdataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New rawdataDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDataID = Me.Columns("DataID")
            Me.columnHR = Me.Columns("HR")
            Me.columnRawDataID = Me.Columns("RawDataID")
            Me.columnSampleTime = Me.Columns("SampleTime")
            Me.columnSPO2 = Me.Columns("SPO2")
        End Sub
        
        Private Sub InitClass()
            Me.columnDataID = New DataColumn("DataID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataID)
            Me.columnHR = New DataColumn("HR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHR)
            Me.columnRawDataID = New DataColumn("RawDataID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRawDataID)
            Me.columnSampleTime = New DataColumn("SampleTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSampleTime)
            Me.columnSPO2 = New DataColumn("SPO2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPO2)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnDataID}, true))
            Me.columnDataID.AutoIncrement = true
            Me.columnDataID.AllowDBNull = false
            Me.columnDataID.Unique = true
        End Sub
        
        Public Function NewrawdataRow() As rawdataRow
            Return CType(Me.NewRow,rawdataRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New rawdataRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(rawdataRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rawdataRowChangedEvent) Is Nothing) Then
                RaiseEvent rawdataRowChanged(Me, New rawdataRowChangeEvent(CType(e.Row,rawdataRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rawdataRowChangingEvent) Is Nothing) Then
                RaiseEvent rawdataRowChanging(Me, New rawdataRowChangeEvent(CType(e.Row,rawdataRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rawdataRowDeletedEvent) Is Nothing) Then
                RaiseEvent rawdataRowDeleted(Me, New rawdataRowChangeEvent(CType(e.Row,rawdataRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rawdataRowDeletingEvent) Is Nothing) Then
                RaiseEvent rawdataRowDeleting(Me, New rawdataRowChangeEvent(CType(e.Row,rawdataRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoverawdataRow(ByVal row As rawdataRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class rawdataRow
        Inherits DataRow
        
        Private tablerawdata As rawdataDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablerawdata = CType(Me.Table,rawdataDataTable)
        End Sub
        
        Public Property DataID As Integer
            Get
                Return CType(Me(Me.tablerawdata.DataIDColumn),Integer)
            End Get
            Set
                Me(Me.tablerawdata.DataIDColumn) = value
            End Set
        End Property
        
        Public Property HR As String
            Get
                Try 
                    Return CType(Me(Me.tablerawdata.HRColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerawdata.HRColumn) = value
            End Set
        End Property
        
        Public Property RawDataID As Integer
            Get
                Try 
                    Return CType(Me(Me.tablerawdata.RawDataIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerawdata.RawDataIDColumn) = value
            End Set
        End Property
        
        Public Property SampleTime As Date
            Get
                Try 
                    Return CType(Me(Me.tablerawdata.SampleTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerawdata.SampleTimeColumn) = value
            End Set
        End Property
        
        Public Property SPO2 As String
            Get
                Try 
                    Return CType(Me(Me.tablerawdata.SPO2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerawdata.SPO2Column) = value
            End Set
        End Property
        
        Public Property reportsRow As reportsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ReportToData")),reportsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ReportToData"))
            End Set
        End Property
        
        Public Function IsHRNull() As Boolean
            Return Me.IsNull(Me.tablerawdata.HRColumn)
        End Function
        
        Public Sub SetHRNull()
            Me(Me.tablerawdata.HRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRawDataIDNull() As Boolean
            Return Me.IsNull(Me.tablerawdata.RawDataIDColumn)
        End Function
        
        Public Sub SetRawDataIDNull()
            Me(Me.tablerawdata.RawDataIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSampleTimeNull() As Boolean
            Return Me.IsNull(Me.tablerawdata.SampleTimeColumn)
        End Function
        
        Public Sub SetSampleTimeNull()
            Me(Me.tablerawdata.SampleTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPO2Null() As Boolean
            Return Me.IsNull(Me.tablerawdata.SPO2Column)
        End Function
        
        Public Sub SetSPO2Null()
            Me(Me.tablerawdata.SPO2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class rawdataRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As rawdataRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As rawdataRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As rawdataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CrystalReportsRptDataDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAnalysisData As DataColumn
        
        Private columnaverageHR As DataColumn
        
        Private columnAverageSpO2 As DataColumn
        
        Private columnCollectionEndDate As DataColumn
        
        Private columnCollectionStartDate As DataColumn
        
        Private columnComments As DataColumn
        
        Private columnCustomerID As DataColumn
        
        Private columnDateOfReport As DataColumn
        
        Private columnDesatIncidenceIndex As DataColumn
        
        Private columnDesatLessThan3minsAvgTime As DataColumn
        
        Private columnDesatLessThen3minsAvgTimeInMin As DataColumn
        
        Private columnDesatLessThen3minsAvgTimeInSec As DataColumn
        
        Private columnDesatlessThen3minsNum As DataColumn
        
        Private columndesatOver3minCount As DataColumn
        
        Private columndesatOver4minCount As DataColumn
        
        Private columndesatOver4minTime As DataColumn
        
        Private columndesatUnder1minCount As DataColumn
        
        Private columndesatUnder1minTime As DataColumn
        
        Private columndesatUnder2minCount As DataColumn
        
        Private columndesatUnder2minTime As DataColumn
        
        Private columndesatUnder3minCount As DataColumn
        
        Private columndesatUnder3minTime As DataColumn
        
        Private columndesatUnder4minCount As DataColumn
        
        Private columndesatUnder4minTime As DataColumn
        
        Private columnExcludedData As DataColumn
        
        Private columnhighHR As DataColumn
        
        Private columnHighSpO2 As DataColumn
        
        Private columnLongestDesatCustomDuration As DataColumn
        
        Private columnLongestDesatCustomValue As DataColumn
        
        Private columnlowHR As DataColumn
        
        Private columnLowSpO2 As DataColumn
        
        Private columnOrgAddress As DataColumn
        
        Private columnOrgCity As DataColumn
        
        Private columnOrgID As DataColumn
        
        Private columnOrgName As DataColumn
        
        Private columnOrgOfficeFax As DataColumn
        
        Private columnOrgOfficePhone As DataColumn
        
        Private columnOrgState As DataColumn
        
        Private columnOrgZipCode As DataColumn
        
        Private columnPatientAddress As DataColumn
        
        Private columnPatientCity As DataColumn
        
        Private columnPatientFax As DataColumn
        
        Private columnPatientFirstName As DataColumn
        
        Private columnPatientID As DataColumn
        
        Private columnPatientLastName As DataColumn
        
        Private columnPatientPhone As DataColumn
        
        Private columnPatientState As DataColumn
        
        Private columnPatientZip As DataColumn
        
        Private columnRecordedData As DataColumn
        
        Private columnReportID As DataColumn
        
        Private columnRequestingMD As DataColumn
        
        Private columnRptDataKey As DataColumn
        
        Private columnSpO2custom As DataColumn
        
        Private columnTimeSpO260 As DataColumn
        
        Private columnTimeSpO260Percent As DataColumn
        
        Private columnTimeSpO270 As DataColumn
        
        Private columnTimeSpO270Percent As DataColumn
        
        Private columnTimeSpO280 As DataColumn
        
        Private columnTimeSpO280Percent As DataColumn
        
        Private columnTimeSpO290 As DataColumn
        
        Private columnTimeSpO290Percent As DataColumn
        
        Private columnTimeSpO2custom As DataColumn
        
        Friend Sub New()
            MyBase.New("CrystalReportsRptData")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AnalysisDataColumn As DataColumn
            Get
                Return Me.columnAnalysisData
            End Get
        End Property
        
        Friend ReadOnly Property averageHRColumn As DataColumn
            Get
                Return Me.columnaverageHR
            End Get
        End Property
        
        Friend ReadOnly Property AverageSpO2Column As DataColumn
            Get
                Return Me.columnAverageSpO2
            End Get
        End Property
        
        Friend ReadOnly Property CollectionEndDateColumn As DataColumn
            Get
                Return Me.columnCollectionEndDate
            End Get
        End Property
        
        Friend ReadOnly Property CollectionStartDateColumn As DataColumn
            Get
                Return Me.columnCollectionStartDate
            End Get
        End Property
        
        Friend ReadOnly Property CommentsColumn As DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property DateOfReportColumn As DataColumn
            Get
                Return Me.columnDateOfReport
            End Get
        End Property
        
        Friend ReadOnly Property DesatIncidenceIndexColumn As DataColumn
            Get
                Return Me.columnDesatIncidenceIndex
            End Get
        End Property
        
        Friend ReadOnly Property DesatLessThan3minsAvgTimeColumn As DataColumn
            Get
                Return Me.columnDesatLessThan3minsAvgTime
            End Get
        End Property
        
        Friend ReadOnly Property DesatLessThen3minsAvgTimeInMinColumn As DataColumn
            Get
                Return Me.columnDesatLessThen3minsAvgTimeInMin
            End Get
        End Property
        
        Friend ReadOnly Property DesatLessThen3minsAvgTimeInSecColumn As DataColumn
            Get
                Return Me.columnDesatLessThen3minsAvgTimeInSec
            End Get
        End Property
        
        Friend ReadOnly Property DesatlessThen3minsNumColumn As DataColumn
            Get
                Return Me.columnDesatlessThen3minsNum
            End Get
        End Property
        
        Friend ReadOnly Property desatOver3minCountColumn As DataColumn
            Get
                Return Me.columndesatOver3minCount
            End Get
        End Property
        
        Friend ReadOnly Property desatOver4minCountColumn As DataColumn
            Get
                Return Me.columndesatOver4minCount
            End Get
        End Property
        
        Friend ReadOnly Property desatOver4minTimeColumn As DataColumn
            Get
                Return Me.columndesatOver4minTime
            End Get
        End Property
        
        Friend ReadOnly Property desatUnder1minCountColumn As DataColumn
            Get
                Return Me.columndesatUnder1minCount
            End Get
        End Property
        
        Friend ReadOnly Property desatUnder1minTimeColumn As DataColumn
            Get
                Return Me.columndesatUnder1minTime
            End Get
        End Property
        
        Friend ReadOnly Property desatUnder2minCountColumn As DataColumn
            Get
                Return Me.columndesatUnder2minCount
            End Get
        End Property
        
        Friend ReadOnly Property desatUnder2minTimeColumn As DataColumn
            Get
                Return Me.columndesatUnder2minTime
            End Get
        End Property
        
        Friend ReadOnly Property desatUnder3minCountColumn As DataColumn
            Get
                Return Me.columndesatUnder3minCount
            End Get
        End Property
        
        Friend ReadOnly Property desatUnder3minTimeColumn As DataColumn
            Get
                Return Me.columndesatUnder3minTime
            End Get
        End Property
        
        Friend ReadOnly Property desatUnder4minCountColumn As DataColumn
            Get
                Return Me.columndesatUnder4minCount
            End Get
        End Property
        
        Friend ReadOnly Property desatUnder4minTimeColumn As DataColumn
            Get
                Return Me.columndesatUnder4minTime
            End Get
        End Property
        
        Friend ReadOnly Property ExcludedDataColumn As DataColumn
            Get
                Return Me.columnExcludedData
            End Get
        End Property
        
        Friend ReadOnly Property highHRColumn As DataColumn
            Get
                Return Me.columnhighHR
            End Get
        End Property
        
        Friend ReadOnly Property HighSpO2Column As DataColumn
            Get
                Return Me.columnHighSpO2
            End Get
        End Property
        
        Friend ReadOnly Property LongestDesatCustomDurationColumn As DataColumn
            Get
                Return Me.columnLongestDesatCustomDuration
            End Get
        End Property
        
        Friend ReadOnly Property LongestDesatCustomValueColumn As DataColumn
            Get
                Return Me.columnLongestDesatCustomValue
            End Get
        End Property
        
        Friend ReadOnly Property lowHRColumn As DataColumn
            Get
                Return Me.columnlowHR
            End Get
        End Property
        
        Friend ReadOnly Property LowSpO2Column As DataColumn
            Get
                Return Me.columnLowSpO2
            End Get
        End Property
        
        Friend ReadOnly Property OrgAddressColumn As DataColumn
            Get
                Return Me.columnOrgAddress
            End Get
        End Property
        
        Friend ReadOnly Property OrgCityColumn As DataColumn
            Get
                Return Me.columnOrgCity
            End Get
        End Property
        
        Friend ReadOnly Property OrgIDColumn As DataColumn
            Get
                Return Me.columnOrgID
            End Get
        End Property
        
        Friend ReadOnly Property OrgNameColumn As DataColumn
            Get
                Return Me.columnOrgName
            End Get
        End Property
        
        Friend ReadOnly Property OrgOfficeFaxColumn As DataColumn
            Get
                Return Me.columnOrgOfficeFax
            End Get
        End Property
        
        Friend ReadOnly Property OrgOfficePhoneColumn As DataColumn
            Get
                Return Me.columnOrgOfficePhone
            End Get
        End Property
        
        Friend ReadOnly Property OrgStateColumn As DataColumn
            Get
                Return Me.columnOrgState
            End Get
        End Property
        
        Friend ReadOnly Property OrgZipCodeColumn As DataColumn
            Get
                Return Me.columnOrgZipCode
            End Get
        End Property
        
        Friend ReadOnly Property PatientAddressColumn As DataColumn
            Get
                Return Me.columnPatientAddress
            End Get
        End Property
        
        Friend ReadOnly Property PatientCityColumn As DataColumn
            Get
                Return Me.columnPatientCity
            End Get
        End Property
        
        Friend ReadOnly Property PatientFaxColumn As DataColumn
            Get
                Return Me.columnPatientFax
            End Get
        End Property
        
        Friend ReadOnly Property PatientFirstNameColumn As DataColumn
            Get
                Return Me.columnPatientFirstName
            End Get
        End Property
        
        Friend ReadOnly Property PatientIDColumn As DataColumn
            Get
                Return Me.columnPatientID
            End Get
        End Property
        
        Friend ReadOnly Property PatientLastNameColumn As DataColumn
            Get
                Return Me.columnPatientLastName
            End Get
        End Property
        
        Friend ReadOnly Property PatientPhoneColumn As DataColumn
            Get
                Return Me.columnPatientPhone
            End Get
        End Property
        
        Friend ReadOnly Property PatientStateColumn As DataColumn
            Get
                Return Me.columnPatientState
            End Get
        End Property
        
        Friend ReadOnly Property PatientZipColumn As DataColumn
            Get
                Return Me.columnPatientZip
            End Get
        End Property
        
        Friend ReadOnly Property RecordedDataColumn As DataColumn
            Get
                Return Me.columnRecordedData
            End Get
        End Property
        
        Friend ReadOnly Property ReportIDColumn As DataColumn
            Get
                Return Me.columnReportID
            End Get
        End Property
        
        Friend ReadOnly Property RequestingMDColumn As DataColumn
            Get
                Return Me.columnRequestingMD
            End Get
        End Property
        
        Friend ReadOnly Property RptDataKeyColumn As DataColumn
            Get
                Return Me.columnRptDataKey
            End Get
        End Property
        
        Friend ReadOnly Property SpO2customColumn As DataColumn
            Get
                Return Me.columnSpO2custom
            End Get
        End Property
        
        Friend ReadOnly Property TimeSpO260Column As DataColumn
            Get
                Return Me.columnTimeSpO260
            End Get
        End Property
        
        Friend ReadOnly Property TimeSpO260PercentColumn As DataColumn
            Get
                Return Me.columnTimeSpO260Percent
            End Get
        End Property
        
        Friend ReadOnly Property TimeSpO270Column As DataColumn
            Get
                Return Me.columnTimeSpO270
            End Get
        End Property
        
        Friend ReadOnly Property TimeSpO270PercentColumn As DataColumn
            Get
                Return Me.columnTimeSpO270Percent
            End Get
        End Property
        
        Friend ReadOnly Property TimeSpO280Column As DataColumn
            Get
                Return Me.columnTimeSpO280
            End Get
        End Property
        
        Friend ReadOnly Property TimeSpO280PercentColumn As DataColumn
            Get
                Return Me.columnTimeSpO280Percent
            End Get
        End Property
        
        Friend ReadOnly Property TimeSpO290Column As DataColumn
            Get
                Return Me.columnTimeSpO290
            End Get
        End Property
        
        Friend ReadOnly Property TimeSpO290PercentColumn As DataColumn
            Get
                Return Me.columnTimeSpO290Percent
            End Get
        End Property
        
        Friend ReadOnly Property TimeSpO2customColumn As DataColumn
            Get
                Return Me.columnTimeSpO2custom
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CrystalReportsRptDataRow
            Get
                Return CType(Me.Rows(index),CrystalReportsRptDataRow)
            End Get
        End Property
        
        Public Event CrystalReportsRptDataRowChanged As CrystalReportsRptDataRowChangeEventHandler
        
        Public Event CrystalReportsRptDataRowChanging As CrystalReportsRptDataRowChangeEventHandler
        
        Public Event CrystalReportsRptDataRowDeleted As CrystalReportsRptDataRowChangeEventHandler
        
        Public Event CrystalReportsRptDataRowDeleting As CrystalReportsRptDataRowChangeEventHandler
        
        Public Overloads Sub AddCrystalReportsRptDataRow(ByVal row As CrystalReportsRptDataRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCrystalReportsRptDataRow( _
                    ByVal AnalysisData As String,  _
                    ByVal averageHR As Integer,  _
                    ByVal AverageSpO2 As Integer,  _
                    ByVal CollectionEndDate As String,  _
                    ByVal CollectionStartDate As String,  _
                    ByVal Comments As String,  _
                    ByVal CustomerID As String,  _
                    ByVal DateOfReport As String,  _
                    ByVal DesatIncidenceIndex As Double,  _
                    ByVal DesatLessThan3minsAvgTime As String,  _
                    ByVal DesatLessThen3minsAvgTimeInMin As Integer,  _
                    ByVal DesatLessThen3minsAvgTimeInSec As Integer,  _
                    ByVal DesatlessThen3minsNum As Integer,  _
                    ByVal desatOver3minCount As Integer,  _
                    ByVal desatOver4minCount As Integer,  _
                    ByVal desatOver4minTime As String,  _
                    ByVal desatUnder1minCount As Integer,  _
                    ByVal desatUnder1minTime As String,  _
                    ByVal desatUnder2minCount As Integer,  _
                    ByVal desatUnder2minTime As String,  _
                    ByVal desatUnder3minCount As Integer,  _
                    ByVal desatUnder3minTime As String,  _
                    ByVal desatUnder4minCount As Integer,  _
                    ByVal desatUnder4minTime As String,  _
                    ByVal ExcludedData As String,  _
                    ByVal highHR As Integer,  _
                    ByVal HighSpO2 As Integer,  _
                    ByVal LongestDesatCustomDuration As Integer,  _
                    ByVal LongestDesatCustomValue As Integer,  _
                    ByVal lowHR As Integer,  _
                    ByVal LowSpO2 As Integer,  _
                    ByVal OrgAddress As String,  _
                    ByVal OrgCity As String,  _
                    ByVal OrgID As String,  _
                    ByVal OrgName As String,  _
                    ByVal OrgOfficeFax As String,  _
                    ByVal OrgOfficePhone As String,  _
                    ByVal OrgState As String,  _
                    ByVal OrgZipCode As String,  _
                    ByVal PatientAddress As String,  _
                    ByVal PatientCity As String,  _
                    ByVal PatientFax As String,  _
                    ByVal PatientFirstName As String,  _
                    ByVal PatientID As String,  _
                    ByVal PatientLastName As String,  _
                    ByVal PatientPhone As String,  _
                    ByVal PatientState As String,  _
                    ByVal PatientZip As String,  _
                    ByVal RecordedData As String,  _
                    ByVal ReportID As String,  _
                    ByVal RequestingMD As String,  _
                    ByVal SpO2custom As Integer,  _
                    ByVal TimeSpO260 As String,  _
                    ByVal TimeSpO260Percent As String,  _
                    ByVal TimeSpO270 As String,  _
                    ByVal TimeSpO270Percent As String,  _
                    ByVal TimeSpO280 As String,  _
                    ByVal TimeSpO280Percent As String,  _
                    ByVal TimeSpO290 As String,  _
                    ByVal TimeSpO290Percent As String,  _
                    ByVal TimeSpO2custom As String) As CrystalReportsRptDataRow
            Dim rowCrystalReportsRptDataRow As CrystalReportsRptDataRow = CType(Me.NewRow,CrystalReportsRptDataRow)
            rowCrystalReportsRptDataRow.ItemArray = New Object() {AnalysisData, averageHR, AverageSpO2, CollectionEndDate, CollectionStartDate, Comments, CustomerID, DateOfReport, DesatIncidenceIndex, DesatLessThan3minsAvgTime, DesatLessThen3minsAvgTimeInMin, DesatLessThen3minsAvgTimeInSec, DesatlessThen3minsNum, desatOver3minCount, desatOver4minCount, desatOver4minTime, desatUnder1minCount, desatUnder1minTime, desatUnder2minCount, desatUnder2minTime, desatUnder3minCount, desatUnder3minTime, desatUnder4minCount, desatUnder4minTime, ExcludedData, highHR, HighSpO2, LongestDesatCustomDuration, LongestDesatCustomValue, lowHR, LowSpO2, OrgAddress, OrgCity, OrgID, OrgName, OrgOfficeFax, OrgOfficePhone, OrgState, OrgZipCode, PatientAddress, PatientCity, PatientFax, PatientFirstName, PatientID, PatientLastName, PatientPhone, PatientState, PatientZip, RecordedData, ReportID, RequestingMD, Nothing, SpO2custom, TimeSpO260, TimeSpO260Percent, TimeSpO270, TimeSpO270Percent, TimeSpO280, TimeSpO280Percent, TimeSpO290, TimeSpO290Percent, TimeSpO2custom}
            Me.Rows.Add(rowCrystalReportsRptDataRow)
            Return rowCrystalReportsRptDataRow
        End Function
        
        Public Function FindByRptDataKey(ByVal RptDataKey As Integer) As CrystalReportsRptDataRow
            Return CType(Me.Rows.Find(New Object() {RptDataKey}),CrystalReportsRptDataRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CrystalReportsRptDataDataTable = CType(MyBase.Clone,CrystalReportsRptDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CrystalReportsRptDataDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAnalysisData = Me.Columns("AnalysisData")
            Me.columnaverageHR = Me.Columns("averageHR")
            Me.columnAverageSpO2 = Me.Columns("AverageSpO2")
            Me.columnCollectionEndDate = Me.Columns("CollectionEndDate")
            Me.columnCollectionStartDate = Me.Columns("CollectionStartDate")
            Me.columnComments = Me.Columns("Comments")
            Me.columnCustomerID = Me.Columns("CustomerID")
            Me.columnDateOfReport = Me.Columns("DateOfReport")
            Me.columnDesatIncidenceIndex = Me.Columns("DesatIncidenceIndex")
            Me.columnDesatLessThan3minsAvgTime = Me.Columns("DesatLessThan3minsAvgTime")
            Me.columnDesatLessThen3minsAvgTimeInMin = Me.Columns("DesatLessThen3minsAvgTimeInMin")
            Me.columnDesatLessThen3minsAvgTimeInSec = Me.Columns("DesatLessThen3minsAvgTimeInSec")
            Me.columnDesatlessThen3minsNum = Me.Columns("DesatlessThen3minsNum")
            Me.columndesatOver3minCount = Me.Columns("desatOver3minCount")
            Me.columndesatOver4minCount = Me.Columns("desatOver4minCount")
            Me.columndesatOver4minTime = Me.Columns("desatOver4minTime")
            Me.columndesatUnder1minCount = Me.Columns("desatUnder1minCount")
            Me.columndesatUnder1minTime = Me.Columns("desatUnder1minTime")
            Me.columndesatUnder2minCount = Me.Columns("desatUnder2minCount")
            Me.columndesatUnder2minTime = Me.Columns("desatUnder2minTime")
            Me.columndesatUnder3minCount = Me.Columns("desatUnder3minCount")
            Me.columndesatUnder3minTime = Me.Columns("desatUnder3minTime")
            Me.columndesatUnder4minCount = Me.Columns("desatUnder4minCount")
            Me.columndesatUnder4minTime = Me.Columns("desatUnder4minTime")
            Me.columnExcludedData = Me.Columns("ExcludedData")
            Me.columnhighHR = Me.Columns("highHR")
            Me.columnHighSpO2 = Me.Columns("HighSpO2")
            Me.columnLongestDesatCustomDuration = Me.Columns("LongestDesatCustomDuration")
            Me.columnLongestDesatCustomValue = Me.Columns("LongestDesatCustomValue")
            Me.columnlowHR = Me.Columns("lowHR")
            Me.columnLowSpO2 = Me.Columns("LowSpO2")
            Me.columnOrgAddress = Me.Columns("OrgAddress")
            Me.columnOrgCity = Me.Columns("OrgCity")
            Me.columnOrgID = Me.Columns("OrgID")
            Me.columnOrgName = Me.Columns("OrgName")
            Me.columnOrgOfficeFax = Me.Columns("OrgOfficeFax")
            Me.columnOrgOfficePhone = Me.Columns("OrgOfficePhone")
            Me.columnOrgState = Me.Columns("OrgState")
            Me.columnOrgZipCode = Me.Columns("OrgZipCode")
            Me.columnPatientAddress = Me.Columns("PatientAddress")
            Me.columnPatientCity = Me.Columns("PatientCity")
            Me.columnPatientFax = Me.Columns("PatientFax")
            Me.columnPatientFirstName = Me.Columns("PatientFirstName")
            Me.columnPatientID = Me.Columns("PatientID")
            Me.columnPatientLastName = Me.Columns("PatientLastName")
            Me.columnPatientPhone = Me.Columns("PatientPhone")
            Me.columnPatientState = Me.Columns("PatientState")
            Me.columnPatientZip = Me.Columns("PatientZip")
            Me.columnRecordedData = Me.Columns("RecordedData")
            Me.columnReportID = Me.Columns("ReportID")
            Me.columnRequestingMD = Me.Columns("RequestingMD")
            Me.columnRptDataKey = Me.Columns("RptDataKey")
            Me.columnSpO2custom = Me.Columns("SpO2custom")
            Me.columnTimeSpO260 = Me.Columns("TimeSpO260")
            Me.columnTimeSpO260Percent = Me.Columns("TimeSpO260Percent")
            Me.columnTimeSpO270 = Me.Columns("TimeSpO270")
            Me.columnTimeSpO270Percent = Me.Columns("TimeSpO270Percent")
            Me.columnTimeSpO280 = Me.Columns("TimeSpO280")
            Me.columnTimeSpO280Percent = Me.Columns("TimeSpO280Percent")
            Me.columnTimeSpO290 = Me.Columns("TimeSpO290")
            Me.columnTimeSpO290Percent = Me.Columns("TimeSpO290Percent")
            Me.columnTimeSpO2custom = Me.Columns("TimeSpO2custom")
        End Sub
        
        Private Sub InitClass()
            Me.columnAnalysisData = New DataColumn("AnalysisData", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnalysisData)
            Me.columnaverageHR = New DataColumn("averageHR", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaverageHR)
            Me.columnAverageSpO2 = New DataColumn("AverageSpO2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAverageSpO2)
            Me.columnCollectionEndDate = New DataColumn("CollectionEndDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCollectionEndDate)
            Me.columnCollectionStartDate = New DataColumn("CollectionStartDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCollectionStartDate)
            Me.columnComments = New DataColumn("Comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComments)
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnDateOfReport = New DataColumn("DateOfReport", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfReport)
            Me.columnDesatIncidenceIndex = New DataColumn("DesatIncidenceIndex", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesatIncidenceIndex)
            Me.columnDesatLessThan3minsAvgTime = New DataColumn("DesatLessThan3minsAvgTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesatLessThan3minsAvgTime)
            Me.columnDesatLessThen3minsAvgTimeInMin = New DataColumn("DesatLessThen3minsAvgTimeInMin", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesatLessThen3minsAvgTimeInMin)
            Me.columnDesatLessThen3minsAvgTimeInSec = New DataColumn("DesatLessThen3minsAvgTimeInSec", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesatLessThen3minsAvgTimeInSec)
            Me.columnDesatlessThen3minsNum = New DataColumn("DesatlessThen3minsNum", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesatlessThen3minsNum)
            Me.columndesatOver3minCount = New DataColumn("desatOver3minCount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesatOver3minCount)
            Me.columndesatOver4minCount = New DataColumn("desatOver4minCount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesatOver4minCount)
            Me.columndesatOver4minTime = New DataColumn("desatOver4minTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesatOver4minTime)
            Me.columndesatUnder1minCount = New DataColumn("desatUnder1minCount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesatUnder1minCount)
            Me.columndesatUnder1minTime = New DataColumn("desatUnder1minTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesatUnder1minTime)
            Me.columndesatUnder2minCount = New DataColumn("desatUnder2minCount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesatUnder2minCount)
            Me.columndesatUnder2minTime = New DataColumn("desatUnder2minTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesatUnder2minTime)
            Me.columndesatUnder3minCount = New DataColumn("desatUnder3minCount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesatUnder3minCount)
            Me.columndesatUnder3minTime = New DataColumn("desatUnder3minTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesatUnder3minTime)
            Me.columndesatUnder4minCount = New DataColumn("desatUnder4minCount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesatUnder4minCount)
            Me.columndesatUnder4minTime = New DataColumn("desatUnder4minTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesatUnder4minTime)
            Me.columnExcludedData = New DataColumn("ExcludedData", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExcludedData)
            Me.columnhighHR = New DataColumn("highHR", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhighHR)
            Me.columnHighSpO2 = New DataColumn("HighSpO2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHighSpO2)
            Me.columnLongestDesatCustomDuration = New DataColumn("LongestDesatCustomDuration", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLongestDesatCustomDuration)
            Me.columnLongestDesatCustomValue = New DataColumn("LongestDesatCustomValue", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLongestDesatCustomValue)
            Me.columnlowHR = New DataColumn("lowHR", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlowHR)
            Me.columnLowSpO2 = New DataColumn("LowSpO2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLowSpO2)
            Me.columnOrgAddress = New DataColumn("OrgAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrgAddress)
            Me.columnOrgCity = New DataColumn("OrgCity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrgCity)
            Me.columnOrgID = New DataColumn("OrgID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrgID)
            Me.columnOrgName = New DataColumn("OrgName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrgName)
            Me.columnOrgOfficeFax = New DataColumn("OrgOfficeFax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrgOfficeFax)
            Me.columnOrgOfficePhone = New DataColumn("OrgOfficePhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrgOfficePhone)
            Me.columnOrgState = New DataColumn("OrgState", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrgState)
            Me.columnOrgZipCode = New DataColumn("OrgZipCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrgZipCode)
            Me.columnPatientAddress = New DataColumn("PatientAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientAddress)
            Me.columnPatientCity = New DataColumn("PatientCity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientCity)
            Me.columnPatientFax = New DataColumn("PatientFax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientFax)
            Me.columnPatientFirstName = New DataColumn("PatientFirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientFirstName)
            Me.columnPatientID = New DataColumn("PatientID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientID)
            Me.columnPatientLastName = New DataColumn("PatientLastName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientLastName)
            Me.columnPatientPhone = New DataColumn("PatientPhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientPhone)
            Me.columnPatientState = New DataColumn("PatientState", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientState)
            Me.columnPatientZip = New DataColumn("PatientZip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatientZip)
            Me.columnRecordedData = New DataColumn("RecordedData", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecordedData)
            Me.columnReportID = New DataColumn("ReportID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportID)
            Me.columnRequestingMD = New DataColumn("RequestingMD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRequestingMD)
            Me.columnRptDataKey = New DataColumn("RptDataKey", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRptDataKey)
            Me.columnSpO2custom = New DataColumn("SpO2custom", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpO2custom)
            Me.columnTimeSpO260 = New DataColumn("TimeSpO260", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeSpO260)
            Me.columnTimeSpO260Percent = New DataColumn("TimeSpO260Percent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeSpO260Percent)
            Me.columnTimeSpO270 = New DataColumn("TimeSpO270", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeSpO270)
            Me.columnTimeSpO270Percent = New DataColumn("TimeSpO270Percent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeSpO270Percent)
            Me.columnTimeSpO280 = New DataColumn("TimeSpO280", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeSpO280)
            Me.columnTimeSpO280Percent = New DataColumn("TimeSpO280Percent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeSpO280Percent)
            Me.columnTimeSpO290 = New DataColumn("TimeSpO290", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeSpO290)
            Me.columnTimeSpO290Percent = New DataColumn("TimeSpO290Percent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeSpO290Percent)
            Me.columnTimeSpO2custom = New DataColumn("TimeSpO2custom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeSpO2custom)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnRptDataKey}, true))
            Me.columnRptDataKey.AutoIncrement = true
            Me.columnRptDataKey.AllowDBNull = false
            Me.columnRptDataKey.Unique = true
        End Sub
        
        Public Function NewCrystalReportsRptDataRow() As CrystalReportsRptDataRow
            Return CType(Me.NewRow,CrystalReportsRptDataRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CrystalReportsRptDataRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CrystalReportsRptDataRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CrystalReportsRptDataRowChangedEvent) Is Nothing) Then
                RaiseEvent CrystalReportsRptDataRowChanged(Me, New CrystalReportsRptDataRowChangeEvent(CType(e.Row,CrystalReportsRptDataRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CrystalReportsRptDataRowChangingEvent) Is Nothing) Then
                RaiseEvent CrystalReportsRptDataRowChanging(Me, New CrystalReportsRptDataRowChangeEvent(CType(e.Row,CrystalReportsRptDataRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CrystalReportsRptDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent CrystalReportsRptDataRowDeleted(Me, New CrystalReportsRptDataRowChangeEvent(CType(e.Row,CrystalReportsRptDataRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CrystalReportsRptDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent CrystalReportsRptDataRowDeleting(Me, New CrystalReportsRptDataRowChangeEvent(CType(e.Row,CrystalReportsRptDataRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCrystalReportsRptDataRow(ByVal row As CrystalReportsRptDataRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CrystalReportsRptDataRow
        Inherits DataRow
        
        Private tableCrystalReportsRptData As CrystalReportsRptDataDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCrystalReportsRptData = CType(Me.Table,CrystalReportsRptDataDataTable)
        End Sub
        
        Public Property AnalysisData As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.AnalysisDataColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.AnalysisDataColumn) = value
            End Set
        End Property
        
        Public Property averageHR As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.averageHRColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.averageHRColumn) = value
            End Set
        End Property
        
        Public Property AverageSpO2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.AverageSpO2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.AverageSpO2Column) = value
            End Set
        End Property
        
        Public Property CollectionEndDate As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.CollectionEndDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.CollectionEndDateColumn) = value
            End Set
        End Property
        
        Public Property CollectionStartDate As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.CollectionStartDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.CollectionStartDateColumn) = value
            End Set
        End Property
        
        Public Property Comments As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.CommentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.CommentsColumn) = value
            End Set
        End Property
        
        Public Property CustomerID As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.CustomerIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property DateOfReport As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.DateOfReportColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.DateOfReportColumn) = value
            End Set
        End Property
        
        Public Property DesatIncidenceIndex As Double
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.DesatIncidenceIndexColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.DesatIncidenceIndexColumn) = value
            End Set
        End Property
        
        Public Property DesatLessThan3minsAvgTime As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.DesatLessThan3minsAvgTimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.DesatLessThan3minsAvgTimeColumn) = value
            End Set
        End Property
        
        Public Property DesatLessThen3minsAvgTimeInMin As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.DesatLessThen3minsAvgTimeInMinColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.DesatLessThen3minsAvgTimeInMinColumn) = value
            End Set
        End Property
        
        Public Property DesatLessThen3minsAvgTimeInSec As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.DesatLessThen3minsAvgTimeInSecColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.DesatLessThen3minsAvgTimeInSecColumn) = value
            End Set
        End Property
        
        Public Property DesatlessThen3minsNum As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.DesatlessThen3minsNumColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.DesatlessThen3minsNumColumn) = value
            End Set
        End Property
        
        Public Property desatOver3minCount As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.desatOver3minCountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.desatOver3minCountColumn) = value
            End Set
        End Property
        
        Public Property desatOver4minCount As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.desatOver4minCountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.desatOver4minCountColumn) = value
            End Set
        End Property
        
        Public Property desatOver4minTime As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.desatOver4minTimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.desatOver4minTimeColumn) = value
            End Set
        End Property
        
        Public Property desatUnder1minCount As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.desatUnder1minCountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.desatUnder1minCountColumn) = value
            End Set
        End Property
        
        Public Property desatUnder1minTime As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.desatUnder1minTimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.desatUnder1minTimeColumn) = value
            End Set
        End Property
        
        Public Property desatUnder2minCount As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.desatUnder2minCountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.desatUnder2minCountColumn) = value
            End Set
        End Property
        
        Public Property desatUnder2minTime As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.desatUnder2minTimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.desatUnder2minTimeColumn) = value
            End Set
        End Property
        
        Public Property desatUnder3minCount As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.desatUnder3minCountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.desatUnder3minCountColumn) = value
            End Set
        End Property
        
        Public Property desatUnder3minTime As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.desatUnder3minTimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.desatUnder3minTimeColumn) = value
            End Set
        End Property
        
        Public Property desatUnder4minCount As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.desatUnder4minCountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.desatUnder4minCountColumn) = value
            End Set
        End Property
        
        Public Property desatUnder4minTime As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.desatUnder4minTimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.desatUnder4minTimeColumn) = value
            End Set
        End Property
        
        Public Property ExcludedData As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.ExcludedDataColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.ExcludedDataColumn) = value
            End Set
        End Property
        
        Public Property highHR As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.highHRColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.highHRColumn) = value
            End Set
        End Property
        
        Public Property HighSpO2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.HighSpO2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.HighSpO2Column) = value
            End Set
        End Property
        
        Public Property LongestDesatCustomDuration As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.LongestDesatCustomDurationColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.LongestDesatCustomDurationColumn) = value
            End Set
        End Property
        
        Public Property LongestDesatCustomValue As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.LongestDesatCustomValueColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.LongestDesatCustomValueColumn) = value
            End Set
        End Property
        
        Public Property lowHR As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.lowHRColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.lowHRColumn) = value
            End Set
        End Property
        
        Public Property LowSpO2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.LowSpO2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.LowSpO2Column) = value
            End Set
        End Property
        
        Public Property OrgAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.OrgAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.OrgAddressColumn) = value
            End Set
        End Property
        
        Public Property OrgCity As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.OrgCityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.OrgCityColumn) = value
            End Set
        End Property
        
        Public Property OrgID As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.OrgIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.OrgIDColumn) = value
            End Set
        End Property
        
        Public Property OrgName As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.OrgNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.OrgNameColumn) = value
            End Set
        End Property
        
        Public Property OrgOfficeFax As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.OrgOfficeFaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.OrgOfficeFaxColumn) = value
            End Set
        End Property
        
        Public Property OrgOfficePhone As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.OrgOfficePhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.OrgOfficePhoneColumn) = value
            End Set
        End Property
        
        Public Property OrgState As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.OrgStateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.OrgStateColumn) = value
            End Set
        End Property
        
        Public Property OrgZipCode As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.OrgZipCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.OrgZipCodeColumn) = value
            End Set
        End Property
        
        Public Property PatientAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.PatientAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.PatientAddressColumn) = value
            End Set
        End Property
        
        Public Property PatientCity As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.PatientCityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.PatientCityColumn) = value
            End Set
        End Property
        
        Public Property PatientFax As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.PatientFaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.PatientFaxColumn) = value
            End Set
        End Property
        
        Public Property PatientFirstName As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.PatientFirstNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.PatientFirstNameColumn) = value
            End Set
        End Property
        
        Public Property PatientID As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.PatientIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.PatientIDColumn) = value
            End Set
        End Property
        
        Public Property PatientLastName As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.PatientLastNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.PatientLastNameColumn) = value
            End Set
        End Property
        
        Public Property PatientPhone As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.PatientPhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.PatientPhoneColumn) = value
            End Set
        End Property
        
        Public Property PatientState As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.PatientStateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.PatientStateColumn) = value
            End Set
        End Property
        
        Public Property PatientZip As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.PatientZipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.PatientZipColumn) = value
            End Set
        End Property
        
        Public Property RecordedData As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.RecordedDataColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.RecordedDataColumn) = value
            End Set
        End Property
        
        Public Property ReportID As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.ReportIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.ReportIDColumn) = value
            End Set
        End Property
        
        Public Property RequestingMD As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.RequestingMDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.RequestingMDColumn) = value
            End Set
        End Property
        
        Public Property RptDataKey As Integer
            Get
                Return CType(Me(Me.tableCrystalReportsRptData.RptDataKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.RptDataKeyColumn) = value
            End Set
        End Property
        
        Public Property SpO2custom As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.SpO2customColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.SpO2customColumn) = value
            End Set
        End Property
        
        Public Property TimeSpO260 As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.TimeSpO260Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.TimeSpO260Column) = value
            End Set
        End Property
        
        Public Property TimeSpO260Percent As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.TimeSpO260PercentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.TimeSpO260PercentColumn) = value
            End Set
        End Property
        
        Public Property TimeSpO270 As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.TimeSpO270Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.TimeSpO270Column) = value
            End Set
        End Property
        
        Public Property TimeSpO270Percent As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.TimeSpO270PercentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.TimeSpO270PercentColumn) = value
            End Set
        End Property
        
        Public Property TimeSpO280 As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.TimeSpO280Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.TimeSpO280Column) = value
            End Set
        End Property
        
        Public Property TimeSpO280Percent As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.TimeSpO280PercentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.TimeSpO280PercentColumn) = value
            End Set
        End Property
        
        Public Property TimeSpO290 As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.TimeSpO290Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.TimeSpO290Column) = value
            End Set
        End Property
        
        Public Property TimeSpO290Percent As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.TimeSpO290PercentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.TimeSpO290PercentColumn) = value
            End Set
        End Property
        
        Public Property TimeSpO2custom As String
            Get
                Try 
                    Return CType(Me(Me.tableCrystalReportsRptData.TimeSpO2customColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrystalReportsRptData.TimeSpO2customColumn) = value
            End Set
        End Property
        
        Public Function IsAnalysisDataNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.AnalysisDataColumn)
        End Function
        
        Public Sub SetAnalysisDataNull()
            Me(Me.tableCrystalReportsRptData.AnalysisDataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaverageHRNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.averageHRColumn)
        End Function
        
        Public Sub SetaverageHRNull()
            Me(Me.tableCrystalReportsRptData.averageHRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAverageSpO2Null() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.AverageSpO2Column)
        End Function
        
        Public Sub SetAverageSpO2Null()
            Me(Me.tableCrystalReportsRptData.AverageSpO2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCollectionEndDateNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.CollectionEndDateColumn)
        End Function
        
        Public Sub SetCollectionEndDateNull()
            Me(Me.tableCrystalReportsRptData.CollectionEndDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCollectionStartDateNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.CollectionStartDateColumn)
        End Function
        
        Public Sub SetCollectionStartDateNull()
            Me(Me.tableCrystalReportsRptData.CollectionStartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.CommentsColumn)
        End Function
        
        Public Sub SetCommentsNull()
            Me(Me.tableCrystalReportsRptData.CommentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.CustomerIDColumn)
        End Function
        
        Public Sub SetCustomerIDNull()
            Me(Me.tableCrystalReportsRptData.CustomerIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfReportNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.DateOfReportColumn)
        End Function
        
        Public Sub SetDateOfReportNull()
            Me(Me.tableCrystalReportsRptData.DateOfReportColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesatIncidenceIndexNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.DesatIncidenceIndexColumn)
        End Function
        
        Public Sub SetDesatIncidenceIndexNull()
            Me(Me.tableCrystalReportsRptData.DesatIncidenceIndexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesatLessThan3minsAvgTimeNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.DesatLessThan3minsAvgTimeColumn)
        End Function
        
        Public Sub SetDesatLessThan3minsAvgTimeNull()
            Me(Me.tableCrystalReportsRptData.DesatLessThan3minsAvgTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesatLessThen3minsAvgTimeInMinNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.DesatLessThen3minsAvgTimeInMinColumn)
        End Function
        
        Public Sub SetDesatLessThen3minsAvgTimeInMinNull()
            Me(Me.tableCrystalReportsRptData.DesatLessThen3minsAvgTimeInMinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesatLessThen3minsAvgTimeInSecNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.DesatLessThen3minsAvgTimeInSecColumn)
        End Function
        
        Public Sub SetDesatLessThen3minsAvgTimeInSecNull()
            Me(Me.tableCrystalReportsRptData.DesatLessThen3minsAvgTimeInSecColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesatlessThen3minsNumNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.DesatlessThen3minsNumColumn)
        End Function
        
        Public Sub SetDesatlessThen3minsNumNull()
            Me(Me.tableCrystalReportsRptData.DesatlessThen3minsNumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesatOver3minCountNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.desatOver3minCountColumn)
        End Function
        
        Public Sub SetdesatOver3minCountNull()
            Me(Me.tableCrystalReportsRptData.desatOver3minCountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesatOver4minCountNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.desatOver4minCountColumn)
        End Function
        
        Public Sub SetdesatOver4minCountNull()
            Me(Me.tableCrystalReportsRptData.desatOver4minCountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesatOver4minTimeNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.desatOver4minTimeColumn)
        End Function
        
        Public Sub SetdesatOver4minTimeNull()
            Me(Me.tableCrystalReportsRptData.desatOver4minTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesatUnder1minCountNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.desatUnder1minCountColumn)
        End Function
        
        Public Sub SetdesatUnder1minCountNull()
            Me(Me.tableCrystalReportsRptData.desatUnder1minCountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesatUnder1minTimeNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.desatUnder1minTimeColumn)
        End Function
        
        Public Sub SetdesatUnder1minTimeNull()
            Me(Me.tableCrystalReportsRptData.desatUnder1minTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesatUnder2minCountNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.desatUnder2minCountColumn)
        End Function
        
        Public Sub SetdesatUnder2minCountNull()
            Me(Me.tableCrystalReportsRptData.desatUnder2minCountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesatUnder2minTimeNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.desatUnder2minTimeColumn)
        End Function
        
        Public Sub SetdesatUnder2minTimeNull()
            Me(Me.tableCrystalReportsRptData.desatUnder2minTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesatUnder3minCountNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.desatUnder3minCountColumn)
        End Function
        
        Public Sub SetdesatUnder3minCountNull()
            Me(Me.tableCrystalReportsRptData.desatUnder3minCountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesatUnder3minTimeNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.desatUnder3minTimeColumn)
        End Function
        
        Public Sub SetdesatUnder3minTimeNull()
            Me(Me.tableCrystalReportsRptData.desatUnder3minTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesatUnder4minCountNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.desatUnder4minCountColumn)
        End Function
        
        Public Sub SetdesatUnder4minCountNull()
            Me(Me.tableCrystalReportsRptData.desatUnder4minCountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesatUnder4minTimeNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.desatUnder4minTimeColumn)
        End Function
        
        Public Sub SetdesatUnder4minTimeNull()
            Me(Me.tableCrystalReportsRptData.desatUnder4minTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExcludedDataNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.ExcludedDataColumn)
        End Function
        
        Public Sub SetExcludedDataNull()
            Me(Me.tableCrystalReportsRptData.ExcludedDataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshighHRNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.highHRColumn)
        End Function
        
        Public Sub SethighHRNull()
            Me(Me.tableCrystalReportsRptData.highHRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHighSpO2Null() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.HighSpO2Column)
        End Function
        
        Public Sub SetHighSpO2Null()
            Me(Me.tableCrystalReportsRptData.HighSpO2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsLongestDesatCustomDurationNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.LongestDesatCustomDurationColumn)
        End Function
        
        Public Sub SetLongestDesatCustomDurationNull()
            Me(Me.tableCrystalReportsRptData.LongestDesatCustomDurationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLongestDesatCustomValueNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.LongestDesatCustomValueColumn)
        End Function
        
        Public Sub SetLongestDesatCustomValueNull()
            Me(Me.tableCrystalReportsRptData.LongestDesatCustomValueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslowHRNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.lowHRColumn)
        End Function
        
        Public Sub SetlowHRNull()
            Me(Me.tableCrystalReportsRptData.lowHRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLowSpO2Null() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.LowSpO2Column)
        End Function
        
        Public Sub SetLowSpO2Null()
            Me(Me.tableCrystalReportsRptData.LowSpO2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrgAddressNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.OrgAddressColumn)
        End Function
        
        Public Sub SetOrgAddressNull()
            Me(Me.tableCrystalReportsRptData.OrgAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrgCityNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.OrgCityColumn)
        End Function
        
        Public Sub SetOrgCityNull()
            Me(Me.tableCrystalReportsRptData.OrgCityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrgIDNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.OrgIDColumn)
        End Function
        
        Public Sub SetOrgIDNull()
            Me(Me.tableCrystalReportsRptData.OrgIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrgNameNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.OrgNameColumn)
        End Function
        
        Public Sub SetOrgNameNull()
            Me(Me.tableCrystalReportsRptData.OrgNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrgOfficeFaxNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.OrgOfficeFaxColumn)
        End Function
        
        Public Sub SetOrgOfficeFaxNull()
            Me(Me.tableCrystalReportsRptData.OrgOfficeFaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrgOfficePhoneNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.OrgOfficePhoneColumn)
        End Function
        
        Public Sub SetOrgOfficePhoneNull()
            Me(Me.tableCrystalReportsRptData.OrgOfficePhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrgStateNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.OrgStateColumn)
        End Function
        
        Public Sub SetOrgStateNull()
            Me(Me.tableCrystalReportsRptData.OrgStateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrgZipCodeNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.OrgZipCodeColumn)
        End Function
        
        Public Sub SetOrgZipCodeNull()
            Me(Me.tableCrystalReportsRptData.OrgZipCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatientAddressNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.PatientAddressColumn)
        End Function
        
        Public Sub SetPatientAddressNull()
            Me(Me.tableCrystalReportsRptData.PatientAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatientCityNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.PatientCityColumn)
        End Function
        
        Public Sub SetPatientCityNull()
            Me(Me.tableCrystalReportsRptData.PatientCityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatientFaxNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.PatientFaxColumn)
        End Function
        
        Public Sub SetPatientFaxNull()
            Me(Me.tableCrystalReportsRptData.PatientFaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatientFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.PatientFirstNameColumn)
        End Function
        
        Public Sub SetPatientFirstNameNull()
            Me(Me.tableCrystalReportsRptData.PatientFirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatientIDNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.PatientIDColumn)
        End Function
        
        Public Sub SetPatientIDNull()
            Me(Me.tableCrystalReportsRptData.PatientIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatientLastNameNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.PatientLastNameColumn)
        End Function
        
        Public Sub SetPatientLastNameNull()
            Me(Me.tableCrystalReportsRptData.PatientLastNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatientPhoneNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.PatientPhoneColumn)
        End Function
        
        Public Sub SetPatientPhoneNull()
            Me(Me.tableCrystalReportsRptData.PatientPhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatientStateNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.PatientStateColumn)
        End Function
        
        Public Sub SetPatientStateNull()
            Me(Me.tableCrystalReportsRptData.PatientStateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatientZipNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.PatientZipColumn)
        End Function
        
        Public Sub SetPatientZipNull()
            Me(Me.tableCrystalReportsRptData.PatientZipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecordedDataNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.RecordedDataColumn)
        End Function
        
        Public Sub SetRecordedDataNull()
            Me(Me.tableCrystalReportsRptData.RecordedDataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReportIDNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.ReportIDColumn)
        End Function
        
        Public Sub SetReportIDNull()
            Me(Me.tableCrystalReportsRptData.ReportIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRequestingMDNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.RequestingMDColumn)
        End Function
        
        Public Sub SetRequestingMDNull()
            Me(Me.tableCrystalReportsRptData.RequestingMDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpO2customNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.SpO2customColumn)
        End Function
        
        Public Sub SetSpO2customNull()
            Me(Me.tableCrystalReportsRptData.SpO2customColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeSpO260Null() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.TimeSpO260Column)
        End Function
        
        Public Sub SetTimeSpO260Null()
            Me(Me.tableCrystalReportsRptData.TimeSpO260Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeSpO260PercentNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.TimeSpO260PercentColumn)
        End Function
        
        Public Sub SetTimeSpO260PercentNull()
            Me(Me.tableCrystalReportsRptData.TimeSpO260PercentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeSpO270Null() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.TimeSpO270Column)
        End Function
        
        Public Sub SetTimeSpO270Null()
            Me(Me.tableCrystalReportsRptData.TimeSpO270Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeSpO270PercentNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.TimeSpO270PercentColumn)
        End Function
        
        Public Sub SetTimeSpO270PercentNull()
            Me(Me.tableCrystalReportsRptData.TimeSpO270PercentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeSpO280Null() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.TimeSpO280Column)
        End Function
        
        Public Sub SetTimeSpO280Null()
            Me(Me.tableCrystalReportsRptData.TimeSpO280Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeSpO280PercentNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.TimeSpO280PercentColumn)
        End Function
        
        Public Sub SetTimeSpO280PercentNull()
            Me(Me.tableCrystalReportsRptData.TimeSpO280PercentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeSpO290Null() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.TimeSpO290Column)
        End Function
        
        Public Sub SetTimeSpO290Null()
            Me(Me.tableCrystalReportsRptData.TimeSpO290Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeSpO290PercentNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.TimeSpO290PercentColumn)
        End Function
        
        Public Sub SetTimeSpO290PercentNull()
            Me(Me.tableCrystalReportsRptData.TimeSpO290PercentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeSpO2customNull() As Boolean
            Return Me.IsNull(Me.tableCrystalReportsRptData.TimeSpO2customColumn)
        End Function
        
        Public Sub SetTimeSpO2customNull()
            Me(Me.tableCrystalReportsRptData.TimeSpO2customColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CrystalReportsRptDataRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CrystalReportsRptDataRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CrystalReportsRptDataRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CrystalReportsRptDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
